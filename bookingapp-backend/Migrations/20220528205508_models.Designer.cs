// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bookingapp_backend.Models;
using bookingapp_backend.Repository;

namespace bookingapp_backend.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20220528205508_models")]
    partial class models
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("bookingapp_backend.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int>("LabId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LabId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("bookingapp_backend.Models.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("InitiatorId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("bookingapp_backend.Models.Lab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("labId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Labs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAdded = new DateTime(2022, 5, 29, 1, 55, 7, 577, DateTimeKind.Local).AddTicks(1546),
                            DateUpdated = new DateTime(2022, 5, 29, 1, 55, 7, 577, DateTimeKind.Local).AddTicks(8947),
                            Details = "CCNA Lab Remote",
                            Name = "CCNA",
                            labId = "ccna"
                        },
                        new
                        {
                            Id = 2,
                            DateAdded = new DateTime(2022, 5, 29, 1, 55, 7, 577, DateTimeKind.Local).AddTicks(9318),
                            DateUpdated = new DateTime(2022, 5, 29, 1, 55, 7, 577, DateTimeKind.Local).AddTicks(9329),
                            Details = "CISCO Official Lab",
                            Name = "CISCO",
                            labId = "cisco"
                        });
                });

            modelBuilder.Entity("bookingapp_backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<int>("Role").HasValue(0);
                });

            modelBuilder.Entity("bookingapp_backend.Models.Instructor", b =>
                {
                    b.HasBaseType("bookingapp_backend.Models.User");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("bookingapp_backend.Models.Booking", b =>
                {
                    b.HasOne("bookingapp_backend.Models.Lab", null)
                        .WithMany("Bookings")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bookingapp_backend.Models.User", null)
                        .WithMany("Bookings")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
